<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="599"><g><title>[[heap]] (1 samples, 0.17%)</title><rect x="0.0000%" y="565" width="0.1669%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="0.0000%" y="549" width="0.1669%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="0.0000%" y="533" width="0.1669%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.0000%" y="517" width="0.1669%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>[libc.so.6] (4 samples, 0.67%)</title><rect x="0.1669%" y="549" width="0.6678%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="4"/><text x="0.4169%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.67%)</title><rect x="0.1669%" y="533" width="0.6678%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="4"/><text x="0.4169%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.6678%" y="517" width="0.1669%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.9178%" y="527.50"></text></g><g><title>[[stack]] (5 samples, 0.83%)</title><rect x="0.1669%" y="565" width="0.8347%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="5"/><text x="0.4169%" y="575.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="0.8347%" y="549" width="0.1669%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="1.0847%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="0.8347%" y="533" width="0.1669%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="1"/><text x="1.0847%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.8347%" y="517" width="0.1669%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="1.0847%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.8347%" y="501" width="0.1669%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="1.0847%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.50%)</title><rect x="1.3356%" y="533" width="0.5008%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="3"/><text x="1.5856%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.50%)</title><rect x="1.3356%" y="517" width="0.5008%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="3"/><text x="1.5856%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.33%)</title><rect x="1.5025%" y="501" width="0.3339%" height="15" fill="rgb(217,207,13)" fg:x="9" fg:w="2"/><text x="1.7525%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.33%)</title><rect x="1.5025%" y="485" width="0.3339%" height="15" fill="rgb(231,73,38)" fg:x="9" fg:w="2"/><text x="1.7525%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.17%)</title><rect x="1.6694%" y="469" width="0.1669%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="1"/><text x="1.9194%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.17%)</title><rect x="1.6694%" y="453" width="0.1669%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="1"/><text x="1.9194%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 1.34%)</title><rect x="1.0017%" y="549" width="1.3356%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="8"/><text x="1.2517%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.50%)</title><rect x="1.8364%" y="533" width="0.5008%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="3"/><text x="2.0864%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.1703%" y="517" width="0.1669%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="1"/><text x="2.4203%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 1.67%)</title><rect x="1.0017%" y="565" width="1.6694%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="10"/><text x="1.2517%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="2.3372%" y="549" width="0.3339%" height="15" fill="rgb(221,5,38)" fg:x="14" fg:w="2"/><text x="2.5872%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.6711%" y="565" width="0.1669%" height="15" fill="rgb(247,18,42)" fg:x="16" fg:w="1"/><text x="2.9211%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="2.6711%" y="549" width="0.1669%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="1"/><text x="2.9211%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.6711%" y="533" width="0.1669%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="1"/><text x="2.9211%" y="543.50"></text></g><g><title>&lt;clio::output::Output as gq_cli::output::WriteValue&gt;::write_value (1 samples, 0.17%)</title><rect x="2.8381%" y="437" width="0.1669%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="1"/><text x="3.0881%" y="447.50"></text></g><g><title>gq_core::format::value::&lt;impl gq_core::format::PrettyFormatColored for serde_json::value::Value&gt;::pretty_format_colored_to_writer (1 samples, 0.17%)</title><rect x="2.8381%" y="421" width="0.1669%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="1"/><text x="3.0881%" y="431.50"></text></g><g><title>gq_core::format::value::serialize_with_formatter (1 samples, 0.17%)</title><rect x="2.8381%" y="405" width="0.1669%" height="15" fill="rgb(214,148,48)" fg:x="17" fg:w="1"/><text x="3.0881%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.17%)</title><rect x="2.8381%" y="389" width="0.1669%" height="15" fill="rgb(232,36,49)" fg:x="17" fg:w="1"/><text x="3.0881%" y="399.50"></text></g><g><title>_ZN10serde_json5value3ser76_$LT$impl$u20$serde..ser..Serialize$u20$for$u20$serde_json..value..Value$GT$9serialize17h1494fd8fea08ce96E.llvm.8783873863122847994 (1 samples, 0.17%)</title><rect x="2.8381%" y="373" width="0.1669%" height="15" fill="rgb(209,103,24)" fg:x="17" fg:w="1"/><text x="3.0881%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.17%)</title><rect x="2.8381%" y="357" width="0.1669%" height="15" fill="rgb(229,88,8)" fg:x="17" fg:w="1"/><text x="3.0881%" y="367.50"></text></g><g><title>&lt;colored_json::ColoredFormatter&lt;F&gt; as serde_json::ser::Formatter&gt;::begin_string (1 samples, 0.17%)</title><rect x="2.8381%" y="341" width="0.1669%" height="15" fill="rgb(213,181,19)" fg:x="17" fg:w="1"/><text x="3.0881%" y="351.50"></text></g><g><title>&lt;yansi::paint::Painted&lt;T&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.17%)</title><rect x="2.8381%" y="325" width="0.1669%" height="15" fill="rgb(254,191,54)" fg:x="17" fg:w="1"/><text x="3.0881%" y="335.50"></text></g><g><title>yansi::style::Style::fmt_suffix (1 samples, 0.17%)</title><rect x="2.8381%" y="309" width="0.1669%" height="15" fill="rgb(241,83,37)" fg:x="17" fg:w="1"/><text x="3.0881%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;gq_core::query::apply::InternalError&gt; (1 samples, 0.17%)</title><rect x="3.0050%" y="341" width="0.1669%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="1"/><text x="3.2550%" y="351.50"></text></g><g><title>cfree (1 samples, 0.17%)</title><rect x="3.0050%" y="325" width="0.1669%" height="15" fill="rgb(226,3,54)" fg:x="18" fg:w="1"/><text x="3.2550%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.67%)</title><rect x="3.5058%" y="309" width="0.6678%" height="15" fill="rgb(245,192,40)" fg:x="21" fg:w="4"/><text x="3.7558%" y="319.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="4.5075%" y="277" width="0.1669%" height="15" fill="rgb(238,167,29)" fg:x="27" fg:w="1"/><text x="4.7575%" y="287.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (4 samples, 0.67%)</title><rect x="4.6745%" y="277" width="0.6678%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="4"/><text x="4.9245%" y="287.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (12 samples, 2.00%)</title><rect x="4.1736%" y="293" width="2.0033%" height="15" fill="rgb(231,60,39)" fg:x="25" fg:w="12"/><text x="4.4236%" y="303.50">_..</text></g><g><title>cfree (5 samples, 0.83%)</title><rect x="5.3422%" y="277" width="0.8347%" height="15" fill="rgb(208,69,12)" fg:x="32" fg:w="5"/><text x="5.5922%" y="287.50"></text></g><g><title>[libc.so.6] (5 samples, 0.83%)</title><rect x="5.3422%" y="261" width="0.8347%" height="15" fill="rgb(235,93,37)" fg:x="32" fg:w="5"/><text x="5.5922%" y="271.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="6.1770%" y="293" width="0.1669%" height="15" fill="rgb(213,116,39)" fg:x="37" fg:w="1"/><text x="6.4270%" y="303.50"></text></g><g><title>_ZN4core3ptr117drop_in_place$LT$alloc..collections..btree..map..IntoIter$LT$alloc..string..String$C$serde_json..value..Value$GT$$GT$17heaccf2cd813cde40E.llvm.8711800609168330401 (15 samples, 2.50%)</title><rect x="4.1736%" y="309" width="2.5042%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="15"/><text x="4.4236%" y="319.50">_Z..</text></g><g><title>cfree (2 samples, 0.33%)</title><rect x="6.3439%" y="293" width="0.3339%" height="15" fill="rgb(206,96,30)" fg:x="38" fg:w="2"/><text x="6.5939%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="6.5109%" y="277" width="0.1669%" height="15" fill="rgb(218,138,4)" fg:x="39" fg:w="1"/><text x="6.7609%" y="287.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.9843172746299066228 (1 samples, 0.17%)</title><rect x="7.1786%" y="229" width="0.1669%" height="15" fill="rgb(250,191,14)" fg:x="43" fg:w="1"/><text x="7.4286%" y="239.50"></text></g><g><title>_ZN4core3ptr117drop_in_place$LT$alloc..collections..btree..map..IntoIter$LT$alloc..string..String$C$serde_json..value..Value$GT$$GT$17heaccf2cd813cde40E.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="7.1786%" y="213" width="0.1669%" height="15" fill="rgb(239,60,40)" fg:x="43" fg:w="1"/><text x="7.4286%" y="223.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="7.1786%" y="197" width="0.1669%" height="15" fill="rgb(206,27,48)" fg:x="43" fg:w="1"/><text x="7.4286%" y="207.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (6 samples, 1.00%)</title><rect x="6.8447%" y="245" width="1.0017%" height="15" fill="rgb(225,35,8)" fg:x="41" fg:w="6"/><text x="7.0947%" y="255.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (3 samples, 0.50%)</title><rect x="7.3456%" y="229" width="0.5008%" height="15" fill="rgb(250,213,24)" fg:x="44" fg:w="3"/><text x="7.5956%" y="239.50"></text></g><g><title>__rust_dealloc (1 samples, 0.17%)</title><rect x="7.6795%" y="213" width="0.1669%" height="15" fill="rgb(247,123,22)" fg:x="46" fg:w="1"/><text x="7.9295%" y="223.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (5 samples, 0.83%)</title><rect x="8.5142%" y="213" width="0.8347%" height="15" fill="rgb(231,138,38)" fg:x="51" fg:w="5"/><text x="8.7642%" y="223.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (4 samples, 0.67%)</title><rect x="8.6811%" y="197" width="0.6678%" height="15" fill="rgb(231,145,46)" fg:x="52" fg:w="4"/><text x="8.9311%" y="207.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.17%)</title><rect x="9.3489%" y="213" width="0.1669%" height="15" fill="rgb(251,118,11)" fg:x="56" fg:w="1"/><text x="9.5989%" y="223.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.9843172746299066228 (18 samples, 3.01%)</title><rect x="7.8464%" y="245" width="3.0050%" height="15" fill="rgb(217,147,25)" fg:x="47" fg:w="18"/><text x="8.0964%" y="255.50">_ZN..</text></g><g><title>_ZN4core3ptr117drop_in_place$LT$alloc..collections..btree..map..IntoIter$LT$alloc..string..String$C$serde_json..value..Value$GT$$GT$17heaccf2cd813cde40E.llvm.8711800609168330401 (17 samples, 2.84%)</title><rect x="8.0134%" y="229" width="2.8381%" height="15" fill="rgb(247,81,37)" fg:x="48" fg:w="17"/><text x="8.2634%" y="239.50">_Z..</text></g><g><title>cfree (8 samples, 1.34%)</title><rect x="9.5159%" y="213" width="1.3356%" height="15" fill="rgb(209,12,38)" fg:x="57" fg:w="8"/><text x="9.7659%" y="223.50"></text></g><g><title>[libc.so.6] (7 samples, 1.17%)</title><rect x="9.6828%" y="197" width="1.1686%" height="15" fill="rgb(227,1,9)" fg:x="58" fg:w="7"/><text x="9.9328%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.67%)</title><rect x="10.1836%" y="181" width="0.6678%" height="15" fill="rgb(248,47,43)" fg:x="61" fg:w="4"/><text x="10.4336%" y="191.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="10.8514%" y="245" width="0.1669%" height="15" fill="rgb(221,10,30)" fg:x="65" fg:w="1"/><text x="11.1014%" y="255.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (62 samples, 10.35%)</title><rect x="6.8447%" y="261" width="10.3506%" height="15" fill="rgb(210,229,1)" fg:x="41" fg:w="62"/><text x="7.0947%" y="271.50">_ZN4core3ptr45d..</text></g><g><title>cfree (37 samples, 6.18%)</title><rect x="11.0184%" y="245" width="6.1770%" height="15" fill="rgb(222,148,37)" fg:x="66" fg:w="37"/><text x="11.2684%" y="255.50">cfree</text></g><g><title>[libc.so.6] (35 samples, 5.84%)</title><rect x="11.3523%" y="229" width="5.8431%" height="15" fill="rgb(234,67,33)" fg:x="68" fg:w="35"/><text x="11.6023%" y="239.50">[libc.s..</text></g><g><title>[libc.so.6] (34 samples, 5.68%)</title><rect x="11.5192%" y="213" width="5.6761%" height="15" fill="rgb(247,98,35)" fg:x="69" fg:w="34"/><text x="11.7692%" y="223.50">[libc.s..</text></g><g><title>[libc.so.6] (13 samples, 2.17%)</title><rect x="15.0250%" y="197" width="2.1703%" height="15" fill="rgb(247,138,52)" fg:x="90" fg:w="13"/><text x="15.2750%" y="207.50">[..</text></g><g><title>_ZN4core3ptr117drop_in_place$LT$alloc..collections..btree..map..IntoIter$LT$alloc..string..String$C$serde_json..value..Value$GT$$GT$17heaccf2cd813cde40E.llvm.8711800609168330401 (63 samples, 10.52%)</title><rect x="6.8447%" y="277" width="10.5175%" height="15" fill="rgb(213,79,30)" fg:x="41" fg:w="63"/><text x="7.0947%" y="287.50">_ZN4core3ptr117..</text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="17.1953%" y="261" width="0.1669%" height="15" fill="rgb(246,177,23)" fg:x="103" fg:w="1"/><text x="17.4453%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="17.3623%" y="245" width="0.1669%" height="15" fill="rgb(230,62,27)" fg:x="104" fg:w="1"/><text x="17.6123%" y="255.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="18.1970%" y="181" width="0.1669%" height="15" fill="rgb(216,154,8)" fg:x="109" fg:w="1"/><text x="18.4470%" y="191.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (3 samples, 0.50%)</title><rect x="18.0301%" y="197" width="0.5008%" height="15" fill="rgb(244,35,45)" fg:x="108" fg:w="3"/><text x="18.2801%" y="207.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="18.3639%" y="181" width="0.1669%" height="15" fill="rgb(251,115,12)" fg:x="110" fg:w="1"/><text x="18.6139%" y="191.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (8 samples, 1.34%)</title><rect x="17.8631%" y="213" width="1.3356%" height="15" fill="rgb(240,54,50)" fg:x="107" fg:w="8"/><text x="18.1131%" y="223.50"></text></g><g><title>cfree (4 samples, 0.67%)</title><rect x="18.5309%" y="197" width="0.6678%" height="15" fill="rgb(233,84,52)" fg:x="111" fg:w="4"/><text x="18.7809%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="18.8648%" y="181" width="0.3339%" height="15" fill="rgb(207,117,47)" fg:x="113" fg:w="2"/><text x="19.1148%" y="191.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (11 samples, 1.84%)</title><rect x="17.5292%" y="229" width="1.8364%" height="15" fill="rgb(249,43,39)" fg:x="105" fg:w="11"/><text x="17.7792%" y="239.50">_..</text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="19.1987%" y="213" width="0.1669%" height="15" fill="rgb(209,38,44)" fg:x="115" fg:w="1"/><text x="19.4487%" y="223.50"></text></g><g><title>_ZN4core3ptr117drop_in_place$LT$alloc..collections..btree..map..IntoIter$LT$alloc..string..String$C$serde_json..value..Value$GT$$GT$17heaccf2cd813cde40E.llvm.8711800609168330401 (13 samples, 2.17%)</title><rect x="17.5292%" y="245" width="2.1703%" height="15" fill="rgb(236,212,23)" fg:x="105" fg:w="13"/><text x="17.7792%" y="255.50">_..</text></g><g><title>cfree (2 samples, 0.33%)</title><rect x="19.3656%" y="229" width="0.3339%" height="15" fill="rgb(242,79,21)" fg:x="116" fg:w="2"/><text x="19.6156%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="19.5326%" y="213" width="0.1669%" height="15" fill="rgb(211,96,35)" fg:x="117" fg:w="1"/><text x="19.7826%" y="223.50"></text></g><g><title>_ZN4core3ptr117drop_in_place$LT$alloc..collections..btree..map..IntoIter$LT$alloc..string..String$C$serde_json..value..Value$GT$$GT$17heaccf2cd813cde40E.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="19.6995%" y="213" width="0.1669%" height="15" fill="rgb(253,215,40)" fg:x="118" fg:w="1"/><text x="19.9495%" y="223.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="19.6995%" y="197" width="0.1669%" height="15" fill="rgb(211,81,21)" fg:x="118" fg:w="1"/><text x="19.9495%" y="207.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="19.6995%" y="181" width="0.1669%" height="15" fill="rgb(208,190,38)" fg:x="118" fg:w="1"/><text x="19.9495%" y="191.50"></text></g><g><title>_ZN4core3ptr45drop_in_place$LT$serde_json..value..Value$GT$17ha6a8a8c8c25cbe5bE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="19.8664%" y="165" width="0.1669%" height="15" fill="rgb(235,213,38)" fg:x="119" fg:w="1"/><text x="20.1164%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 17.20%)</title><rect x="3.0050%" y="373" width="17.1953%" height="15" fill="rgb(237,122,38)" fg:x="18" fg:w="103"/><text x="3.2550%" y="383.50">&lt;core::iter::adapters::map:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (103 samples, 17.20%)</title><rect x="3.0050%" y="357" width="17.1953%" height="15" fill="rgb(244,218,35)" fg:x="18" fg:w="103"/><text x="3.2550%" y="367.50">core::ops::function::impls:..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect (102 samples, 17.03%)</title><rect x="3.1720%" y="341" width="17.0284%" height="15" fill="rgb(240,68,47)" fg:x="19" fg:w="102"/><text x="3.4220%" y="351.50">gq_core::query::query_key:..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect_object (102 samples, 17.03%)</title><rect x="3.1720%" y="325" width="17.0284%" height="15" fill="rgb(210,16,53)" fg:x="19" fg:w="102"/><text x="3.4220%" y="335.50">gq_core::query::query_key:..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect (81 samples, 13.52%)</title><rect x="6.6778%" y="309" width="13.5225%" height="15" fill="rgb(235,124,12)" fg:x="40" fg:w="81"/><text x="6.9278%" y="319.50">gq_core::query::quer..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect_object (81 samples, 13.52%)</title><rect x="6.6778%" y="293" width="13.5225%" height="15" fill="rgb(224,169,11)" fg:x="40" fg:w="81"/><text x="6.9278%" y="303.50">gq_core::query::quer..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect (17 samples, 2.84%)</title><rect x="17.3623%" y="277" width="2.8381%" height="15" fill="rgb(250,166,2)" fg:x="104" fg:w="17"/><text x="17.6123%" y="287.50">gq..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect_object (17 samples, 2.84%)</title><rect x="17.3623%" y="261" width="2.8381%" height="15" fill="rgb(242,216,29)" fg:x="104" fg:w="17"/><text x="17.6123%" y="271.50">gq..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect (3 samples, 0.50%)</title><rect x="19.6995%" y="245" width="0.5008%" height="15" fill="rgb(230,116,27)" fg:x="118" fg:w="3"/><text x="19.9495%" y="255.50"></text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect_object (3 samples, 0.50%)</title><rect x="19.6995%" y="229" width="0.5008%" height="15" fill="rgb(228,99,48)" fg:x="118" fg:w="3"/><text x="19.9495%" y="239.50"></text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect (2 samples, 0.33%)</title><rect x="19.8664%" y="213" width="0.3339%" height="15" fill="rgb(253,11,6)" fg:x="119" fg:w="2"/><text x="20.1164%" y="223.50"></text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect_object (2 samples, 0.33%)</title><rect x="19.8664%" y="197" width="0.3339%" height="15" fill="rgb(247,143,39)" fg:x="119" fg:w="2"/><text x="20.1164%" y="207.50"></text></g><g><title>_ZN4core3ptr117drop_in_place$LT$alloc..collections..btree..map..IntoIter$LT$alloc..string..String$C$serde_json..value..Value$GT$$GT$17heaccf2cd813cde40E.llvm.8711800609168330401 (2 samples, 0.33%)</title><rect x="19.8664%" y="181" width="0.3339%" height="15" fill="rgb(236,97,10)" fg:x="119" fg:w="2"/><text x="20.1164%" y="191.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h6944f011d9d6ed8eE.llvm.8711800609168330401 (1 samples, 0.17%)</title><rect x="20.0334%" y="165" width="0.1669%" height="15" fill="rgb(233,208,19)" fg:x="120" fg:w="1"/><text x="20.2834%" y="175.50"></text></g><g><title>cfree (1 samples, 0.17%)</title><rect x="20.0334%" y="149" width="0.1669%" height="15" fill="rgb(216,164,2)" fg:x="120" fg:w="1"/><text x="20.2834%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="20.0334%" y="133" width="0.1669%" height="15" fill="rgb(220,129,5)" fg:x="120" fg:w="1"/><text x="20.2834%" y="143.50"></text></g><g><title>gq_core::query::apply::&lt;impl gq_core::query::Query&gt;::apply (128 samples, 21.37%)</title><rect x="3.0050%" y="437" width="21.3689%" height="15" fill="rgb(242,17,10)" fg:x="18" fg:w="128"/><text x="3.2550%" y="447.50">gq_core::query::apply::&lt;impl gq_co..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect (128 samples, 21.37%)</title><rect x="3.0050%" y="421" width="21.3689%" height="15" fill="rgb(242,107,0)" fg:x="18" fg:w="128"/><text x="3.2550%" y="431.50">gq_core::query::query_key::QueryKe..</text></g><g><title>gq_core::query::query_key::QueryKey::do_inspect_array (128 samples, 21.37%)</title><rect x="3.0050%" y="405" width="21.3689%" height="15" fill="rgb(251,28,31)" fg:x="18" fg:w="128"/><text x="3.2550%" y="415.50">gq_core::query::query_key::QueryKe..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (128 samples, 21.37%)</title><rect x="3.0050%" y="389" width="21.3689%" height="15" fill="rgb(233,223,10)" fg:x="18" fg:w="128"/><text x="3.2550%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 4.17%)</title><rect x="20.2003%" y="373" width="4.1736%" height="15" fill="rgb(215,21,27)" fg:x="121" fg:w="25"/><text x="20.4503%" y="383.50">alloc..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hd944562f15ded2e2E.llvm.16549693346320764494 (25 samples, 4.17%)</title><rect x="20.2003%" y="357" width="4.1736%" height="15" fill="rgb(232,23,21)" fg:x="121" fg:w="25"/><text x="20.4503%" y="367.50">_ZN5a..</text></g><g><title>realloc (25 samples, 4.17%)</title><rect x="20.2003%" y="341" width="4.1736%" height="15" fill="rgb(244,5,23)" fg:x="121" fg:w="25"/><text x="20.4503%" y="351.50">reall..</text></g><g><title>[libc.so.6] (25 samples, 4.17%)</title><rect x="20.2003%" y="325" width="4.1736%" height="15" fill="rgb(226,81,46)" fg:x="121" fg:w="25"/><text x="20.4503%" y="335.50">[libc..</text></g><g><title>[libc.so.6] (25 samples, 4.17%)</title><rect x="20.2003%" y="309" width="4.1736%" height="15" fill="rgb(247,70,30)" fg:x="121" fg:w="25"/><text x="20.4503%" y="319.50">[libc..</text></g><g><title>[libc.so.6] (24 samples, 4.01%)</title><rect x="20.3673%" y="293" width="4.0067%" height="15" fill="rgb(212,68,19)" fg:x="122" fg:w="24"/><text x="20.6173%" y="303.50">[lib..</text></g><g><title>[libc.so.6] (8 samples, 1.34%)</title><rect x="23.0384%" y="277" width="1.3356%" height="15" fill="rgb(240,187,13)" fg:x="138" fg:w="8"/><text x="23.2884%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="24.3740%" y="405" width="0.1669%" height="15" fill="rgb(223,113,26)" fg:x="146" fg:w="1"/><text x="24.6240%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="24.3740%" y="389" width="0.1669%" height="15" fill="rgb(206,192,2)" fg:x="146" fg:w="1"/><text x="24.6240%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 1.34%)</title><rect x="25.3756%" y="357" width="1.3356%" height="15" fill="rgb(241,108,4)" fg:x="152" fg:w="8"/><text x="25.6256%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.33%)</title><rect x="26.3773%" y="341" width="0.3339%" height="15" fill="rgb(247,173,49)" fg:x="158" fg:w="2"/><text x="26.6273%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.33%)</title><rect x="26.7112%" y="357" width="0.3339%" height="15" fill="rgb(224,114,35)" fg:x="160" fg:w="2"/><text x="26.9612%" y="367.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="26.8781%" y="341" width="0.1669%" height="15" fill="rgb(245,159,27)" fg:x="161" fg:w="1"/><text x="27.1281%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="26.8781%" y="325" width="0.1669%" height="15" fill="rgb(245,172,44)" fg:x="161" fg:w="1"/><text x="27.1281%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (16 samples, 2.67%)</title><rect x="24.8748%" y="373" width="2.6711%" height="15" fill="rgb(236,23,11)" fg:x="149" fg:w="16"/><text x="25.1248%" y="383.50">&lt;s..</text></g><g><title>malloc (3 samples, 0.50%)</title><rect x="27.0451%" y="357" width="0.5008%" height="15" fill="rgb(205,117,38)" fg:x="162" fg:w="3"/><text x="27.2951%" y="367.50"></text></g><g><title>[libc.so.6] (3 samples, 0.50%)</title><rect x="27.0451%" y="341" width="0.5008%" height="15" fill="rgb(237,72,25)" fg:x="162" fg:w="3"/><text x="27.2951%" y="351.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 1.34%)</title><rect x="27.8798%" y="341" width="1.3356%" height="15" fill="rgb(244,70,9)" fg:x="167" fg:w="8"/><text x="28.1298%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.33%)</title><rect x="28.8815%" y="325" width="0.3339%" height="15" fill="rgb(217,125,39)" fg:x="173" fg:w="2"/><text x="29.1315%" y="335.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (18 samples, 3.01%)</title><rect x="30.5509%" y="309" width="3.0050%" height="15" fill="rgb(235,36,10)" fg:x="183" fg:w="18"/><text x="30.8009%" y="319.50">&lt;se..</text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.33%)</title><rect x="33.2220%" y="293" width="0.3339%" height="15" fill="rgb(251,123,47)" fg:x="199" fg:w="2"/><text x="33.4720%" y="303.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (4 samples, 0.67%)</title><rect x="33.5559%" y="293" width="0.6678%" height="15" fill="rgb(221,13,13)" fg:x="201" fg:w="4"/><text x="33.8059%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.17%)</title><rect x="34.0568%" y="277" width="0.1669%" height="15" fill="rgb(238,131,9)" fg:x="204" fg:w="1"/><text x="34.3068%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 1.00%)</title><rect x="33.5559%" y="309" width="1.0017%" height="15" fill="rgb(211,50,8)" fg:x="201" fg:w="6"/><text x="33.8059%" y="319.50"></text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="34.2237%" y="293" width="0.3339%" height="15" fill="rgb(245,182,24)" fg:x="205" fg:w="2"/><text x="34.4737%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="34.3907%" y="277" width="0.1669%" height="15" fill="rgb(242,14,37)" fg:x="206" fg:w="1"/><text x="34.6407%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="34.5576%" y="309" width="0.3339%" height="15" fill="rgb(246,228,12)" fg:x="207" fg:w="2"/><text x="34.8076%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (42 samples, 7.01%)</title><rect x="29.7162%" y="325" width="7.0117%" height="15" fill="rgb(213,55,15)" fg:x="178" fg:w="42"/><text x="29.9662%" y="335.50">&lt;serde_js..</text></g><g><title>malloc (11 samples, 1.84%)</title><rect x="34.8915%" y="309" width="1.8364%" height="15" fill="rgb(209,9,3)" fg:x="209" fg:w="11"/><text x="35.1415%" y="319.50">m..</text></g><g><title>[libc.so.6] (9 samples, 1.50%)</title><rect x="35.2254%" y="293" width="1.5025%" height="15" fill="rgb(230,59,30)" fg:x="211" fg:w="9"/><text x="35.4754%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="36.5609%" y="277" width="0.1669%" height="15" fill="rgb(209,121,21)" fg:x="219" fg:w="1"/><text x="36.8109%" y="287.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (25 samples, 4.17%)</title><rect x="37.8965%" y="293" width="4.1736%" height="15" fill="rgb(220,109,13)" fg:x="227" fg:w="25"/><text x="38.1465%" y="303.50">&lt;serd..</text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.83%)</title><rect x="41.2354%" y="277" width="0.8347%" height="15" fill="rgb(232,18,1)" fg:x="247" fg:w="5"/><text x="41.4854%" y="287.50"></text></g><g><title>_ZN3std2io24uninlined_slow_read_byte17hdd978797a2b659c9E.llvm.13440313483858466151 (1 samples, 0.17%)</title><rect x="42.9048%" y="245" width="0.1669%" height="15" fill="rgb(215,41,42)" fg:x="257" fg:w="1"/><text x="43.1548%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.17%)</title><rect x="42.9048%" y="229" width="0.1669%" height="15" fill="rgb(224,123,36)" fg:x="257" fg:w="1"/><text x="43.1548%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.17%)</title><rect x="42.9048%" y="213" width="0.1669%" height="15" fill="rgb(240,125,3)" fg:x="257" fg:w="1"/><text x="43.1548%" y="223.50"></text></g><g><title>read (1 samples, 0.17%)</title><rect x="42.9048%" y="197" width="0.1669%" height="15" fill="rgb(205,98,50)" fg:x="257" fg:w="1"/><text x="43.1548%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="42.9048%" y="181" width="0.1669%" height="15" fill="rgb(205,185,37)" fg:x="257" fg:w="1"/><text x="43.1548%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="42.9048%" y="165" width="0.1669%" height="15" fill="rgb(238,207,15)" fg:x="257" fg:w="1"/><text x="43.1548%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="42.9048%" y="149" width="0.1669%" height="15" fill="rgb(213,199,42)" fg:x="257" fg:w="1"/><text x="43.1548%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="42.9048%" y="133" width="0.1669%" height="15" fill="rgb(235,201,11)" fg:x="257" fg:w="1"/><text x="43.1548%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="42.9048%" y="117" width="0.1669%" height="15" fill="rgb(207,46,11)" fg:x="257" fg:w="1"/><text x="43.1548%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="42.9048%" y="101" width="0.1669%" height="15" fill="rgb(241,35,35)" fg:x="257" fg:w="1"/><text x="43.1548%" y="111.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (5 samples, 0.83%)</title><rect x="42.4040%" y="261" width="0.8347%" height="15" fill="rgb(243,32,47)" fg:x="254" fg:w="5"/><text x="42.6540%" y="271.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.17%)</title><rect x="43.0718%" y="245" width="0.1669%" height="15" fill="rgb(247,202,23)" fg:x="258" fg:w="1"/><text x="43.3218%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.50%)</title><rect x="43.2387%" y="261" width="0.5008%" height="15" fill="rgb(219,102,11)" fg:x="259" fg:w="3"/><text x="43.4887%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (12 samples, 2.00%)</title><rect x="42.0701%" y="277" width="2.0033%" height="15" fill="rgb(243,110,44)" fg:x="252" fg:w="12"/><text x="42.3201%" y="287.50">&lt;..</text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="43.7396%" y="261" width="0.3339%" height="15" fill="rgb(222,74,54)" fg:x="262" fg:w="2"/><text x="43.9896%" y="271.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="43.7396%" y="245" width="0.3339%" height="15" fill="rgb(216,99,12)" fg:x="262" fg:w="2"/><text x="43.9896%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="43.9065%" y="229" width="0.1669%" height="15" fill="rgb(226,22,26)" fg:x="263" fg:w="1"/><text x="44.1565%" y="239.50"></text></g><g><title>_ZN3std2io24uninlined_slow_read_byte17hdd978797a2b659c9E.llvm.13440313483858466151 (1 samples, 0.17%)</title><rect x="50.5843%" y="229" width="0.1669%" height="15" fill="rgb(217,163,10)" fg:x="303" fg:w="1"/><text x="50.8343%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.17%)</title><rect x="50.5843%" y="213" width="0.1669%" height="15" fill="rgb(213,25,53)" fg:x="303" fg:w="1"/><text x="50.8343%" y="223.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.17%)</title><rect x="50.5843%" y="197" width="0.1669%" height="15" fill="rgb(252,105,26)" fg:x="303" fg:w="1"/><text x="50.8343%" y="207.50"></text></g><g><title>read (1 samples, 0.17%)</title><rect x="50.5843%" y="181" width="0.1669%" height="15" fill="rgb(220,39,43)" fg:x="303" fg:w="1"/><text x="50.8343%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="50.5843%" y="165" width="0.1669%" height="15" fill="rgb(229,68,48)" fg:x="303" fg:w="1"/><text x="50.8343%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="50.5843%" y="149" width="0.1669%" height="15" fill="rgb(252,8,32)" fg:x="303" fg:w="1"/><text x="50.8343%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="50.5843%" y="133" width="0.1669%" height="15" fill="rgb(223,20,43)" fg:x="303" fg:w="1"/><text x="50.8343%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="50.5843%" y="117" width="0.1669%" height="15" fill="rgb(229,81,49)" fg:x="303" fg:w="1"/><text x="50.8343%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="50.5843%" y="101" width="0.1669%" height="15" fill="rgb(236,28,36)" fg:x="303" fg:w="1"/><text x="50.8343%" y="111.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (38 samples, 6.34%)</title><rect x="44.7412%" y="245" width="6.3439%" height="15" fill="rgb(249,185,26)" fg:x="268" fg:w="38"/><text x="44.9912%" y="255.50">&lt;serde_j..</text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.33%)</title><rect x="50.7513%" y="229" width="0.3339%" height="15" fill="rgb(249,174,33)" fg:x="304" fg:w="2"/><text x="51.0013%" y="239.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 1.34%)</title><rect x="52.0868%" y="213" width="1.3356%" height="15" fill="rgb(233,201,37)" fg:x="312" fg:w="8"/><text x="52.3368%" y="223.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.33%)</title><rect x="53.0885%" y="197" width="0.3339%" height="15" fill="rgb(221,78,26)" fg:x="318" fg:w="2"/><text x="53.3385%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.17%)</title><rect x="53.4224%" y="213" width="0.1669%" height="15" fill="rgb(250,127,30)" fg:x="320" fg:w="1"/><text x="53.6724%" y="223.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.17%)</title><rect x="53.4224%" y="197" width="0.1669%" height="15" fill="rgb(230,49,44)" fg:x="320" fg:w="1"/><text x="53.6724%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.50%)</title><rect x="53.5893%" y="213" width="0.5008%" height="15" fill="rgb(229,67,23)" fg:x="321" fg:w="3"/><text x="53.8393%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (19 samples, 3.17%)</title><rect x="51.5860%" y="229" width="3.1720%" height="15" fill="rgb(249,83,47)" fg:x="309" fg:w="19"/><text x="51.8360%" y="239.50">&lt;se..</text></g><g><title>malloc (4 samples, 0.67%)</title><rect x="54.0902%" y="213" width="0.6678%" height="15" fill="rgb(215,43,3)" fg:x="324" fg:w="4"/><text x="54.3402%" y="223.50"></text></g><g><title>[libc.so.6] (3 samples, 0.50%)</title><rect x="54.2571%" y="197" width="0.5008%" height="15" fill="rgb(238,154,13)" fg:x="325" fg:w="3"/><text x="54.5071%" y="207.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (23 samples, 3.84%)</title><rect x="55.0918%" y="197" width="3.8397%" height="15" fill="rgb(219,56,2)" fg:x="330" fg:w="23"/><text x="55.3418%" y="207.50">&lt;ser..</text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.33%)</title><rect x="58.5977%" y="181" width="0.3339%" height="15" fill="rgb(233,0,4)" fg:x="351" fg:w="2"/><text x="58.8477%" y="191.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (15 samples, 2.50%)</title><rect x="59.5993%" y="165" width="2.5042%" height="15" fill="rgb(235,30,7)" fg:x="357" fg:w="15"/><text x="59.8493%" y="175.50">&lt;s..</text></g><g><title>core::str::converts::from_utf8 (7 samples, 1.17%)</title><rect x="60.9349%" y="149" width="1.1686%" height="15" fill="rgb(250,79,13)" fg:x="365" fg:w="7"/><text x="61.1849%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="62.1035%" y="165" width="0.1669%" height="15" fill="rgb(211,146,34)" fg:x="372" fg:w="1"/><text x="62.3535%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (23 samples, 3.84%)</title><rect x="59.2654%" y="181" width="3.8397%" height="15" fill="rgb(228,22,38)" fg:x="355" fg:w="23"/><text x="59.5154%" y="191.50">&lt;ser..</text></g><g><title>malloc (5 samples, 0.83%)</title><rect x="62.2705%" y="165" width="0.8347%" height="15" fill="rgb(235,168,5)" fg:x="373" fg:w="5"/><text x="62.5205%" y="175.50"></text></g><g><title>[libc.so.6] (4 samples, 0.67%)</title><rect x="62.4374%" y="149" width="0.6678%" height="15" fill="rgb(221,155,16)" fg:x="374" fg:w="4"/><text x="62.6874%" y="159.50"></text></g><g><title>_ZN3std2io24uninlined_slow_read_byte17hdd978797a2b659c9E.llvm.13440313483858466151 (1 samples, 0.17%)</title><rect x="69.1152%" y="133" width="0.1669%" height="15" fill="rgb(215,215,53)" fg:x="414" fg:w="1"/><text x="69.3652%" y="143.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.17%)</title><rect x="69.1152%" y="117" width="0.1669%" height="15" fill="rgb(223,4,10)" fg:x="414" fg:w="1"/><text x="69.3652%" y="127.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.17%)</title><rect x="69.1152%" y="101" width="0.1669%" height="15" fill="rgb(234,103,6)" fg:x="414" fg:w="1"/><text x="69.3652%" y="111.50"></text></g><g><title>read (1 samples, 0.17%)</title><rect x="69.1152%" y="85" width="0.1669%" height="15" fill="rgb(227,97,0)" fg:x="414" fg:w="1"/><text x="69.3652%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="69.1152%" y="69" width="0.1669%" height="15" fill="rgb(234,150,53)" fg:x="414" fg:w="1"/><text x="69.3652%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="69.1152%" y="53" width="0.1669%" height="15" fill="rgb(228,201,54)" fg:x="414" fg:w="1"/><text x="69.3652%" y="63.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (37 samples, 6.18%)</title><rect x="63.7730%" y="149" width="6.1770%" height="15" fill="rgb(222,22,37)" fg:x="382" fg:w="37"/><text x="64.0230%" y="159.50">&lt;serde_j..</text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.67%)</title><rect x="69.2821%" y="133" width="0.6678%" height="15" fill="rgb(237,53,32)" fg:x="415" fg:w="4"/><text x="69.5321%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (8 samples, 1.34%)</title><rect x="70.1169%" y="133" width="1.3356%" height="15" fill="rgb(233,25,53)" fg:x="420" fg:w="8"/><text x="70.3669%" y="143.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 1.34%)</title><rect x="70.1169%" y="117" width="1.3356%" height="15" fill="rgb(210,40,34)" fg:x="420" fg:w="8"/><text x="70.3669%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.50%)</title><rect x="70.9516%" y="101" width="0.5008%" height="15" fill="rgb(241,220,44)" fg:x="425" fg:w="3"/><text x="71.2016%" y="111.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (6 samples, 1.00%)</title><rect x="71.4524%" y="101" width="1.0017%" height="15" fill="rgb(235,28,35)" fg:x="428" fg:w="6"/><text x="71.7024%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.17%)</title><rect x="72.2871%" y="85" width="0.1669%" height="15" fill="rgb(210,56,17)" fg:x="433" fg:w="1"/><text x="72.5371%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="72.4541%" y="101" width="0.1669%" height="15" fill="rgb(224,130,29)" fg:x="434" fg:w="1"/><text x="72.7041%" y="111.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="72.6210%" y="101" width="0.1669%" height="15" fill="rgb(235,212,8)" fg:x="435" fg:w="1"/><text x="72.8710%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="72.6210%" y="85" width="0.1669%" height="15" fill="rgb(223,33,50)" fg:x="435" fg:w="1"/><text x="72.8710%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="72.6210%" y="69" width="0.1669%" height="15" fill="rgb(219,149,13)" fg:x="435" fg:w="1"/><text x="72.8710%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="72.6210%" y="53" width="0.1669%" height="15" fill="rgb(250,156,29)" fg:x="435" fg:w="1"/><text x="72.8710%" y="63.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 1.50%)</title><rect x="71.4524%" y="133" width="1.5025%" height="15" fill="rgb(216,193,19)" fg:x="428" fg:w="9"/><text x="71.7024%" y="143.50"></text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (9 samples, 1.50%)</title><rect x="71.4524%" y="117" width="1.5025%" height="15" fill="rgb(216,135,14)" fg:x="428" fg:w="9"/><text x="71.7024%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.17%)</title><rect x="72.7880%" y="101" width="0.1669%" height="15" fill="rgb(241,47,5)" fg:x="436" fg:w="1"/><text x="73.0380%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.17%)</title><rect x="73.1219%" y="101" width="0.1669%" height="15" fill="rgb(233,42,35)" fg:x="438" fg:w="1"/><text x="73.3719%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="73.1219%" y="85" width="0.1669%" height="15" fill="rgb(231,13,6)" fg:x="438" fg:w="1"/><text x="73.3719%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 3.51%)</title><rect x="69.9499%" y="149" width="3.5058%" height="15" fill="rgb(207,181,40)" fg:x="419" fg:w="21"/><text x="70.1999%" y="159.50">&lt;se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.50%)</title><rect x="72.9549%" y="133" width="0.5008%" height="15" fill="rgb(254,173,49)" fg:x="437" fg:w="3"/><text x="73.2049%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.33%)</title><rect x="73.1219%" y="117" width="0.3339%" height="15" fill="rgb(221,1,38)" fg:x="438" fg:w="2"/><text x="73.3719%" y="127.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="73.2888%" y="101" width="0.1669%" height="15" fill="rgb(206,124,46)" fg:x="439" fg:w="1"/><text x="73.5388%" y="111.50"></text></g><g><title>[libc.so.6] (4 samples, 0.67%)</title><rect x="73.4558%" y="149" width="0.6678%" height="15" fill="rgb(249,21,11)" fg:x="440" fg:w="4"/><text x="73.7058%" y="159.50"></text></g><g><title>malloc (5 samples, 0.83%)</title><rect x="74.1235%" y="149" width="0.8347%" height="15" fill="rgb(222,201,40)" fg:x="444" fg:w="5"/><text x="74.3735%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.67%)</title><rect x="74.2905%" y="133" width="0.6678%" height="15" fill="rgb(235,61,29)" fg:x="445" fg:w="4"/><text x="74.5405%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="74.7913%" y="117" width="0.1669%" height="15" fill="rgb(219,207,3)" fg:x="448" fg:w="1"/><text x="75.0413%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="74.7913%" y="101" width="0.1669%" height="15" fill="rgb(222,56,46)" fg:x="448" fg:w="1"/><text x="75.0413%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="74.7913%" y="85" width="0.1669%" height="15" fill="rgb(239,76,54)" fg:x="448" fg:w="1"/><text x="75.0413%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="74.7913%" y="69" width="0.1669%" height="15" fill="rgb(231,124,27)" fg:x="448" fg:w="1"/><text x="75.0413%" y="79.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_ident (1 samples, 0.17%)</title><rect x="74.9583%" y="149" width="0.1669%" height="15" fill="rgb(249,195,6)" fg:x="449" fg:w="1"/><text x="75.2083%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (74 samples, 12.35%)</title><rect x="63.1052%" y="181" width="12.3539%" height="15" fill="rgb(237,174,47)" fg:x="378" fg:w="74"/><text x="63.3552%" y="191.50">&lt;serde_json::de::M..</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (73 samples, 12.19%)</title><rect x="63.2721%" y="165" width="12.1870%" height="15" fill="rgb(206,201,31)" fg:x="379" fg:w="73"/><text x="63.5221%" y="175.50">_ZN10serde_json5va..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (2 samples, 0.33%)</title><rect x="75.1252%" y="149" width="0.3339%" height="15" fill="rgb(231,57,52)" fg:x="450" fg:w="2"/><text x="75.3752%" y="159.50"></text></g><g><title>[libc.so.6] (9 samples, 1.50%)</title><rect x="76.4608%" y="165" width="1.5025%" height="15" fill="rgb(248,177,22)" fg:x="458" fg:w="9"/><text x="76.7108%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (119 samples, 19.87%)</title><rect x="58.9316%" y="197" width="19.8664%" height="15" fill="rgb(215,211,37)" fg:x="353" fg:w="119"/><text x="59.1816%" y="207.50">&lt;serde_json::value::de::&lt;impl s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (20 samples, 3.34%)</title><rect x="75.4591%" y="181" width="3.3389%" height="15" fill="rgb(241,128,51)" fg:x="452" fg:w="20"/><text x="75.7091%" y="191.50">all..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (5 samples, 0.83%)</title><rect x="77.9633%" y="165" width="0.8347%" height="15" fill="rgb(227,165,31)" fg:x="467" fg:w="5"/><text x="78.2133%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.33%)</title><rect x="78.4641%" y="149" width="0.3339%" height="15" fill="rgb(228,167,24)" fg:x="470" fg:w="2"/><text x="78.7141%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="78.6311%" y="133" width="0.1669%" height="15" fill="rgb(228,143,12)" fg:x="471" fg:w="1"/><text x="78.8811%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (146 samples, 24.37%)</title><rect x="54.7579%" y="229" width="24.3740%" height="15" fill="rgb(249,149,8)" fg:x="328" fg:w="146"/><text x="55.0079%" y="239.50">&lt;serde_json::de::MapAccess&lt;R&gt; as serde:..</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (146 samples, 24.37%)</title><rect x="54.7579%" y="213" width="24.3740%" height="15" fill="rgb(243,35,44)" fg:x="328" fg:w="146"/><text x="55.0079%" y="223.50">_ZN10serde_json5value2de77_$LT$impl$u20..</text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="78.7980%" y="197" width="0.3339%" height="15" fill="rgb(246,89,9)" fg:x="472" fg:w="2"/><text x="79.0480%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="78.7980%" y="181" width="0.3339%" height="15" fill="rgb(233,213,13)" fg:x="472" fg:w="2"/><text x="79.0480%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.67%)</title><rect x="79.9666%" y="213" width="0.6678%" height="15" fill="rgb(233,141,41)" fg:x="479" fg:w="4"/><text x="80.2166%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="80.9683%" y="181" width="0.3339%" height="15" fill="rgb(239,167,4)" fg:x="485" fg:w="2"/><text x="81.2183%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (1 samples, 0.17%)</title><rect x="81.3022%" y="181" width="0.1669%" height="15" fill="rgb(209,217,16)" fg:x="487" fg:w="1"/><text x="81.5522%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (184 samples, 30.72%)</title><rect x="51.0851%" y="245" width="30.7179%" height="15" fill="rgb(219,88,35)" fg:x="306" fg:w="184"/><text x="51.3351%" y="255.50">&lt;serde_json::value::de::&lt;impl serde::de::Deseriali..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16 samples, 2.67%)</title><rect x="79.1319%" y="229" width="2.6711%" height="15" fill="rgb(220,193,23)" fg:x="474" fg:w="16"/><text x="79.3819%" y="239.50">al..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (7 samples, 1.17%)</title><rect x="80.6344%" y="213" width="1.1686%" height="15" fill="rgb(230,90,52)" fg:x="483" fg:w="7"/><text x="80.8844%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 1.17%)</title><rect x="80.6344%" y="197" width="1.1686%" height="15" fill="rgb(252,106,19)" fg:x="483" fg:w="7"/><text x="80.8844%" y="207.50"></text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="81.4691%" y="181" width="0.3339%" height="15" fill="rgb(206,74,20)" fg:x="488" fg:w="2"/><text x="81.7191%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="81.4691%" y="165" width="0.3339%" height="15" fill="rgb(230,138,44)" fg:x="488" fg:w="2"/><text x="81.7191%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="81.4691%" y="149" width="0.3339%" height="15" fill="rgb(235,182,43)" fg:x="488" fg:w="2"/><text x="81.7191%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="81.4691%" y="133" width="0.3339%" height="15" fill="rgb(242,16,51)" fg:x="488" fg:w="2"/><text x="81.7191%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="81.4691%" y="117" width="0.3339%" height="15" fill="rgb(248,9,4)" fg:x="488" fg:w="2"/><text x="81.7191%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="81.4691%" y="101" width="0.3339%" height="15" fill="rgb(210,31,22)" fg:x="488" fg:w="2"/><text x="81.7191%" y="111.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="81.8030%" y="245" width="0.1669%" height="15" fill="rgb(239,54,39)" fg:x="490" fg:w="1"/><text x="82.0530%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (229 samples, 38.23%)</title><rect x="44.0735%" y="277" width="38.2304%" height="15" fill="rgb(230,99,41)" fg:x="264" fg:w="229"/><text x="44.3235%" y="287.50">&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_v..</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (228 samples, 38.06%)</title><rect x="44.2404%" y="261" width="38.0634%" height="15" fill="rgb(253,106,12)" fg:x="265" fg:w="228"/><text x="44.4904%" y="271.50">_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (2 samples, 0.33%)</title><rect x="81.9699%" y="245" width="0.3339%" height="15" fill="rgb(213,46,41)" fg:x="491" fg:w="2"/><text x="82.2199%" y="255.50"></text></g><g><title>[libc.so.6] (8 samples, 1.34%)</title><rect x="82.6377%" y="261" width="1.3356%" height="15" fill="rgb(215,133,35)" fg:x="495" fg:w="8"/><text x="82.8877%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (255 samples, 42.57%)</title><rect x="42.0701%" y="293" width="42.5710%" height="15" fill="rgb(213,28,5)" fg:x="252" fg:w="255"/><text x="42.3201%" y="303.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::v..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (14 samples, 2.34%)</title><rect x="82.3038%" y="277" width="2.3372%" height="15" fill="rgb(215,77,49)" fg:x="493" fg:w="14"/><text x="82.5538%" y="287.50">a..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.67%)</title><rect x="83.9733%" y="261" width="0.6678%" height="15" fill="rgb(248,100,22)" fg:x="503" fg:w="4"/><text x="84.2233%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.33%)</title><rect x="84.3072%" y="245" width="0.3339%" height="15" fill="rgb(208,67,9)" fg:x="505" fg:w="2"/><text x="84.5572%" y="255.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="84.6411%" y="293" width="0.3339%" height="15" fill="rgb(219,133,21)" fg:x="507" fg:w="2"/><text x="84.8911%" y="303.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (5 samples, 0.83%)</title><rect x="85.6427%" y="245" width="0.8347%" height="15" fill="rgb(246,46,29)" fg:x="513" fg:w="5"/><text x="85.8927%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.33%)</title><rect x="86.1436%" y="229" width="0.3339%" height="15" fill="rgb(246,185,52)" fg:x="516" fg:w="2"/><text x="86.3936%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.33%)</title><rect x="86.4775%" y="245" width="0.3339%" height="15" fill="rgb(252,136,11)" fg:x="518" fg:w="2"/><text x="86.7275%" y="255.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.33%)</title><rect x="86.4775%" y="229" width="0.3339%" height="15" fill="rgb(219,138,53)" fg:x="518" fg:w="2"/><text x="86.7275%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="86.8114%" y="245" width="0.1669%" height="15" fill="rgb(211,51,23)" fg:x="520" fg:w="1"/><text x="87.0614%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (14 samples, 2.34%)</title><rect x="85.1419%" y="261" width="2.3372%" height="15" fill="rgb(247,221,28)" fg:x="510" fg:w="14"/><text x="85.3919%" y="271.50">&lt;..</text></g><g><title>malloc (3 samples, 0.50%)</title><rect x="86.9783%" y="245" width="0.5008%" height="15" fill="rgb(251,222,45)" fg:x="521" fg:w="3"/><text x="87.2283%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.50%)</title><rect x="86.9783%" y="229" width="0.5008%" height="15" fill="rgb(217,162,53)" fg:x="521" fg:w="3"/><text x="87.2283%" y="239.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (10 samples, 1.67%)</title><rect x="87.9800%" y="229" width="1.6694%" height="15" fill="rgb(229,93,14)" fg:x="527" fg:w="10"/><text x="88.2300%" y="239.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.17%)</title><rect x="90.3172%" y="197" width="0.1669%" height="15" fill="rgb(209,67,49)" fg:x="541" fg:w="1"/><text x="90.5672%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (7 samples, 1.17%)</title><rect x="89.6494%" y="213" width="1.1686%" height="15" fill="rgb(213,87,29)" fg:x="537" fg:w="7"/><text x="89.8994%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.33%)</title><rect x="90.4841%" y="197" width="0.3339%" height="15" fill="rgb(205,151,52)" fg:x="542" fg:w="2"/><text x="90.7341%" y="207.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.33%)</title><rect x="90.4841%" y="181" width="0.3339%" height="15" fill="rgb(253,215,39)" fg:x="542" fg:w="2"/><text x="90.7341%" y="191.50"></text></g><g><title>_ZN3std2io24uninlined_slow_read_byte17hdd978797a2b659c9E.llvm.13440313483858466151 (1 samples, 0.17%)</title><rect x="90.6511%" y="165" width="0.1669%" height="15" fill="rgb(221,220,41)" fg:x="543" fg:w="1"/><text x="90.9011%" y="175.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.17%)</title><rect x="90.6511%" y="149" width="0.1669%" height="15" fill="rgb(218,133,21)" fg:x="543" fg:w="1"/><text x="90.9011%" y="159.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.17%)</title><rect x="90.6511%" y="133" width="0.1669%" height="15" fill="rgb(221,193,43)" fg:x="543" fg:w="1"/><text x="90.9011%" y="143.50"></text></g><g><title>read (1 samples, 0.17%)</title><rect x="90.6511%" y="117" width="0.1669%" height="15" fill="rgb(240,128,52)" fg:x="543" fg:w="1"/><text x="90.9011%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="90.6511%" y="101" width="0.1669%" height="15" fill="rgb(253,114,12)" fg:x="543" fg:w="1"/><text x="90.9011%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="90.6511%" y="85" width="0.1669%" height="15" fill="rgb(215,223,47)" fg:x="543" fg:w="1"/><text x="90.9011%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="90.6511%" y="69" width="0.1669%" height="15" fill="rgb(248,225,23)" fg:x="543" fg:w="1"/><text x="90.9011%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="90.6511%" y="53" width="0.1669%" height="15" fill="rgb(250,108,0)" fg:x="543" fg:w="1"/><text x="90.9011%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="90.6511%" y="37" width="0.1669%" height="15" fill="rgb(228,208,7)" fg:x="543" fg:w="1"/><text x="90.9011%" y="47.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 1.34%)</title><rect x="90.9850%" y="181" width="1.3356%" height="15" fill="rgb(244,45,10)" fg:x="545" fg:w="8"/><text x="91.2350%" y="191.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.17%)</title><rect x="92.1536%" y="165" width="0.1669%" height="15" fill="rgb(207,125,25)" fg:x="552" fg:w="1"/><text x="92.4036%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="92.3205%" y="181" width="0.3339%" height="15" fill="rgb(210,195,18)" fg:x="553" fg:w="2"/><text x="92.5705%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (13 samples, 2.17%)</title><rect x="90.8180%" y="213" width="2.1703%" height="15" fill="rgb(249,80,12)" fg:x="544" fg:w="13"/><text x="91.0680%" y="223.50">&lt;..</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (13 samples, 2.17%)</title><rect x="90.8180%" y="197" width="2.1703%" height="15" fill="rgb(221,65,9)" fg:x="544" fg:w="13"/><text x="91.0680%" y="207.50">_..</text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="92.6544%" y="181" width="0.3339%" height="15" fill="rgb(235,49,36)" fg:x="555" fg:w="2"/><text x="92.9044%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="92.6544%" y="165" width="0.3339%" height="15" fill="rgb(225,32,20)" fg:x="555" fg:w="2"/><text x="92.9044%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 3.51%)</title><rect x="89.6494%" y="229" width="3.5058%" height="15" fill="rgb(215,141,46)" fg:x="537" fg:w="21"/><text x="89.8994%" y="239.50">&lt;se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.17%)</title><rect x="92.9883%" y="213" width="0.1669%" height="15" fill="rgb(250,160,47)" fg:x="557" fg:w="1"/><text x="93.2383%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.17%)</title><rect x="92.9883%" y="197" width="0.1669%" height="15" fill="rgb(216,222,40)" fg:x="557" fg:w="1"/><text x="93.2383%" y="207.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="92.9883%" y="181" width="0.1669%" height="15" fill="rgb(234,217,39)" fg:x="557" fg:w="1"/><text x="93.2383%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="92.9883%" y="165" width="0.1669%" height="15" fill="rgb(207,178,40)" fg:x="557" fg:w="1"/><text x="93.2383%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="92.9883%" y="149" width="0.1669%" height="15" fill="rgb(221,136,13)" fg:x="557" fg:w="1"/><text x="93.2383%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="92.9883%" y="133" width="0.1669%" height="15" fill="rgb(249,199,10)" fg:x="557" fg:w="1"/><text x="93.2383%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="92.9883%" y="117" width="0.1669%" height="15" fill="rgb(249,222,13)" fg:x="557" fg:w="1"/><text x="93.2383%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="93.1553%" y="229" width="0.1669%" height="15" fill="rgb(244,185,38)" fg:x="558" fg:w="1"/><text x="93.4053%" y="239.50"></text></g><g><title>malloc (5 samples, 0.83%)</title><rect x="93.3222%" y="229" width="0.8347%" height="15" fill="rgb(236,202,9)" fg:x="559" fg:w="5"/><text x="93.5722%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.50%)</title><rect x="93.6561%" y="213" width="0.5008%" height="15" fill="rgb(250,229,37)" fg:x="561" fg:w="3"/><text x="93.9061%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="93.9900%" y="197" width="0.1669%" height="15" fill="rgb(206,174,23)" fg:x="563" fg:w="1"/><text x="94.2400%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="93.9900%" y="181" width="0.1669%" height="15" fill="rgb(211,33,43)" fg:x="563" fg:w="1"/><text x="94.2400%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="93.9900%" y="165" width="0.1669%" height="15" fill="rgb(245,58,50)" fg:x="563" fg:w="1"/><text x="94.2400%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="93.9900%" y="149" width="0.1669%" height="15" fill="rgb(244,68,36)" fg:x="563" fg:w="1"/><text x="94.2400%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (41 samples, 6.84%)</title><rect x="87.4791%" y="261" width="6.8447%" height="15" fill="rgb(232,229,15)" fg:x="524" fg:w="41"/><text x="87.7291%" y="271.50">&lt;serde_js..</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (40 samples, 6.68%)</title><rect x="87.6461%" y="245" width="6.6778%" height="15" fill="rgb(254,30,23)" fg:x="525" fg:w="40"/><text x="87.8961%" y="255.50">_ZN10serd..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_ident (1 samples, 0.17%)</title><rect x="94.1569%" y="229" width="0.1669%" height="15" fill="rgb(235,160,14)" fg:x="564" fg:w="1"/><text x="94.4069%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.17%)</title><rect x="94.3239%" y="229" width="0.1669%" height="15" fill="rgb(212,155,44)" fg:x="565" fg:w="1"/><text x="94.5739%" y="239.50"></text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (59 samples, 9.85%)</title><rect x="84.9750%" y="293" width="9.8497%" height="15" fill="rgb(226,2,50)" fg:x="509" fg:w="59"/><text x="85.2250%" y="303.50">_ZN10serde_jso..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (59 samples, 9.85%)</title><rect x="84.9750%" y="277" width="9.8497%" height="15" fill="rgb(234,177,6)" fg:x="509" fg:w="59"/><text x="85.2250%" y="287.50">&lt;serde_json::v..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.50%)</title><rect x="94.3239%" y="261" width="0.5008%" height="15" fill="rgb(217,24,9)" fg:x="565" fg:w="3"/><text x="94.5739%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.50%)</title><rect x="94.3239%" y="245" width="0.5008%" height="15" fill="rgb(220,13,46)" fg:x="565" fg:w="3"/><text x="94.5739%" y="255.50"></text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="94.4908%" y="229" width="0.3339%" height="15" fill="rgb(239,221,27)" fg:x="566" fg:w="2"/><text x="94.7408%" y="239.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="94.4908%" y="213" width="0.3339%" height="15" fill="rgb(222,198,25)" fg:x="566" fg:w="2"/><text x="94.7408%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="94.6578%" y="197" width="0.1669%" height="15" fill="rgb(211,99,13)" fg:x="567" fg:w="1"/><text x="94.9078%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="94.6578%" y="181" width="0.1669%" height="15" fill="rgb(232,111,31)" fg:x="567" fg:w="1"/><text x="94.9078%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="94.6578%" y="165" width="0.1669%" height="15" fill="rgb(245,82,37)" fg:x="567" fg:w="1"/><text x="94.9078%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="94.6578%" y="149" width="0.1669%" height="15" fill="rgb(227,149,46)" fg:x="567" fg:w="1"/><text x="94.9078%" y="159.50"></text></g><g><title>malloc (3 samples, 0.50%)</title><rect x="94.8247%" y="293" width="0.5008%" height="15" fill="rgb(218,36,50)" fg:x="568" fg:w="3"/><text x="95.0747%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="95.1586%" y="277" width="0.1669%" height="15" fill="rgb(226,80,48)" fg:x="570" fg:w="1"/><text x="95.4086%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (353 samples, 58.93%)</title><rect x="36.7279%" y="325" width="58.9316%" height="15" fill="rgb(238,224,15)" fg:x="220" fg:w="353"/><text x="36.9779%" y="335.50">&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (351 samples, 58.60%)</title><rect x="37.0618%" y="309" width="58.5977%" height="15" fill="rgb(241,136,10)" fg:x="222" fg:w="351"/><text x="37.3118%" y="319.50">_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Val..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (2 samples, 0.33%)</title><rect x="95.3255%" y="293" width="0.3339%" height="15" fill="rgb(208,32,45)" fg:x="571" fg:w="2"/><text x="95.5755%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="96.4942%" y="309" width="0.1669%" height="15" fill="rgb(207,135,9)" fg:x="578" fg:w="1"/><text x="96.7442%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.67%)</title><rect x="96.9950%" y="293" width="0.6678%" height="15" fill="rgb(206,86,44)" fg:x="581" fg:w="4"/><text x="97.2450%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="97.3289%" y="277" width="0.3339%" height="15" fill="rgb(245,177,15)" fg:x="583" fg:w="2"/><text x="97.5789%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (412 samples, 68.78%)</title><rect x="29.2154%" y="341" width="68.7813%" height="15" fill="rgb(206,64,50)" fg:x="175" fg:w="412"/><text x="29.4654%" y="351.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (14 samples, 2.34%)</title><rect x="95.6594%" y="325" width="2.3372%" height="15" fill="rgb(234,36,40)" fg:x="573" fg:w="14"/><text x="95.9094%" y="335.50">a..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (8 samples, 1.34%)</title><rect x="96.6611%" y="309" width="1.3356%" height="15" fill="rgb(213,64,8)" fg:x="579" fg:w="8"/><text x="96.9111%" y="319.50"></text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="97.6628%" y="293" width="0.3339%" height="15" fill="rgb(210,75,36)" fg:x="585" fg:w="2"/><text x="97.9128%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="97.8297%" y="277" width="0.1669%" height="15" fill="rgb(229,88,21)" fg:x="586" fg:w="1"/><text x="98.0797%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="97.9967%" y="341" width="0.1669%" height="15" fill="rgb(252,204,47)" fg:x="587" fg:w="1"/><text x="98.2467%" y="351.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="98.1636%" y="341" width="0.1669%" height="15" fill="rgb(208,77,27)" fg:x="588" fg:w="1"/><text x="98.4136%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="98.1636%" y="325" width="0.1669%" height="15" fill="rgb(221,76,26)" fg:x="588" fg:w="1"/><text x="98.4136%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (425 samples, 70.95%)</title><rect x="27.5459%" y="373" width="70.9516%" height="15" fill="rgb(225,139,18)" fg:x="165" fg:w="425"/><text x="27.7959%" y="383.50">&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (423 samples, 70.62%)</title><rect x="27.8798%" y="357" width="70.6177%" height="15" fill="rgb(230,137,11)" fg:x="167" fg:w="423"/><text x="28.1298%" y="367.50">_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize1..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_ident (1 samples, 0.17%)</title><rect x="98.3306%" y="341" width="0.1669%" height="15" fill="rgb(212,28,1)" fg:x="589" fg:w="1"/><text x="98.5806%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="98.8314%" y="357" width="0.3339%" height="15" fill="rgb(248,164,17)" fg:x="592" fg:w="2"/><text x="99.0814%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.17%)</title><rect x="99.3322%" y="341" width="0.1669%" height="15" fill="rgb(222,171,42)" fg:x="595" fg:w="1"/><text x="99.5822%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="99.3322%" y="325" width="0.1669%" height="15" fill="rgb(243,84,45)" fg:x="595" fg:w="1"/><text x="99.5822%" y="335.50"></text></g><g><title>_start (581 samples, 96.99%)</title><rect x="2.8381%" y="565" width="96.9950%" height="15" fill="rgb(252,49,23)" fg:x="17" fg:w="581"/><text x="3.0881%" y="575.50">_start</text></g><g><title>__libc_start_main (581 samples, 96.99%)</title><rect x="2.8381%" y="549" width="96.9950%" height="15" fill="rgb(215,19,7)" fg:x="17" fg:w="581"/><text x="3.0881%" y="559.50">__libc_start_main</text></g><g><title>[libc.so.6] (581 samples, 96.99%)</title><rect x="2.8381%" y="533" width="96.9950%" height="15" fill="rgb(238,81,41)" fg:x="17" fg:w="581"/><text x="3.0881%" y="543.50">[libc.so.6]</text></g><g><title>main (581 samples, 96.99%)</title><rect x="2.8381%" y="517" width="96.9950%" height="15" fill="rgb(210,199,37)" fg:x="17" fg:w="581"/><text x="3.0881%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (581 samples, 96.99%)</title><rect x="2.8381%" y="501" width="96.9950%" height="15" fill="rgb(244,192,49)" fg:x="17" fg:w="581"/><text x="3.0881%" y="511.50">std::rt::lang_start_internal</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h6510fcad6ee0bfc8E.llvm.11904905631967448581 (581 samples, 96.99%)</title><rect x="2.8381%" y="485" width="96.9950%" height="15" fill="rgb(226,211,11)" fg:x="17" fg:w="581"/><text x="3.0881%" y="495.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h6510fcad6ee0bfc8E.llvm.11904905631967448581</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (581 samples, 96.99%)</title><rect x="2.8381%" y="469" width="96.9950%" height="15" fill="rgb(236,162,54)" fg:x="17" fg:w="581"/><text x="3.0881%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>gq::main (581 samples, 96.99%)</title><rect x="2.8381%" y="453" width="96.9950%" height="15" fill="rgb(220,229,9)" fg:x="17" fg:w="581"/><text x="3.0881%" y="463.50">gq::main</text></g><g><title>serde_json::de::from_reader (452 samples, 75.46%)</title><rect x="24.3740%" y="437" width="75.4591%" height="15" fill="rgb(250,87,22)" fg:x="146" fg:w="452"/><text x="24.6240%" y="447.50">serde_json::de::from_reader</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (452 samples, 75.46%)</title><rect x="24.3740%" y="421" width="75.4591%" height="15" fill="rgb(239,43,17)" fg:x="146" fg:w="452"/><text x="24.6240%" y="431.50">_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1..</text></g><g><title>_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1bf3598f425E.llvm.14536674319611239504 (451 samples, 75.29%)</title><rect x="24.5409%" y="405" width="75.2922%" height="15" fill="rgb(231,177,25)" fg:x="147" fg:w="451"/><text x="24.7909%" y="415.50">_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17h9849f1..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (451 samples, 75.29%)</title><rect x="24.5409%" y="389" width="75.2922%" height="15" fill="rgb(219,179,1)" fg:x="147" fg:w="451"/><text x="24.7909%" y="399.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::V..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8 samples, 1.34%)</title><rect x="98.4975%" y="373" width="1.3356%" height="15" fill="rgb(238,219,53)" fg:x="590" fg:w="8"/><text x="98.7475%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.67%)</title><rect x="99.1653%" y="357" width="0.6678%" height="15" fill="rgb(232,167,36)" fg:x="594" fg:w="4"/><text x="99.4153%" y="367.50"></text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="99.4992%" y="341" width="0.3339%" height="15" fill="rgb(244,19,51)" fg:x="596" fg:w="2"/><text x="99.7492%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="99.6661%" y="325" width="0.1669%" height="15" fill="rgb(224,6,22)" fg:x="597" fg:w="1"/><text x="99.9161%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="99.6661%" y="309" width="0.1669%" height="15" fill="rgb(224,145,5)" fg:x="597" fg:w="1"/><text x="99.9161%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="99.6661%" y="293" width="0.1669%" height="15" fill="rgb(234,130,49)" fg:x="597" fg:w="1"/><text x="99.9161%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="99.6661%" y="277" width="0.1669%" height="15" fill="rgb(254,6,2)" fg:x="597" fg:w="1"/><text x="99.9161%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="99.6661%" y="261" width="0.1669%" height="15" fill="rgb(208,96,46)" fg:x="597" fg:w="1"/><text x="99.9161%" y="271.50"></text></g><g><title>all (599 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="599"/><text x="0.2500%" y="607.50"></text></g><g><title>gq (599 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(233,210,1)" fg:x="0" fg:w="599"/><text x="0.2500%" y="591.50">gq</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.17%)</title><rect x="99.8331%" y="565" width="0.1669%" height="15" fill="rgb(244,137,37)" fg:x="598" fg:w="1"/><text x="100.0831%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.17%)</title><rect x="99.8331%" y="549" width="0.1669%" height="15" fill="rgb(240,136,2)" fg:x="598" fg:w="1"/><text x="100.0831%" y="559.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="99.8331%" y="533" width="0.1669%" height="15" fill="rgb(239,18,37)" fg:x="598" fg:w="1"/><text x="100.0831%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="99.8331%" y="517" width="0.1669%" height="15" fill="rgb(218,185,22)" fg:x="598" fg:w="1"/><text x="100.0831%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="99.8331%" y="501" width="0.1669%" height="15" fill="rgb(225,218,4)" fg:x="598" fg:w="1"/><text x="100.0831%" y="511.50"></text></g></svg></svg>